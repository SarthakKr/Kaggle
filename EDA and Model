rm(list=ls())

train_data<- read.csv("../input/ga-customer-revenue-prediction/train.csv", colClasses = rep('factor', 12))
test_data<- read.csv("../input/ga-customer-revenue-prediction/test.csv", colClasses = rep('factor', 12))
sample_submissions<- read.csv("../input/ga-customer-revenue-prediction/sample_submission.csv", stringsAsFactors = FALSE)



## Read in Libraries
library(jsonlite); library(dplyr); library(gtools)

## Append train and test for collective summary
train_data$train_flag<-1
test_data$train_flag<-0
all_data<- rbind(train_data, test_data)


## Flatten out data from JSON objects, put them into a table, merge it back in!

for (mycol in c("device","geoNetwork","totals","trafficSource")){
  #for (mycol in c("device","geoNetwork")){
  all_data[,mycol]<- as.character(all_data[,mycol])
  flattened_data<- as.data.frame(do.call( bind_rows, 
                                          lapply(all_data[,mycol], 
                                                 function(j) as.list(unlist(fromJSON(j, flatten=TRUE))))))
  
  print(paste("Assigned Flattened file for variable:",mycol))
  myiter<-1
  for (myname in colnames(flattened_data)) {
    if(myiter==1) {
      mydf<-as.data.frame(unlist(flattened_data[,myname]))
    }
    if(myiter>1) {
      mydf<<- cbind(mydf,as.data.frame(unlist(flattened_data[,myname])))
    }
    myiter<<-myiter+1
  }
  print(paste("Unlisted unflattened JSON for variable:",mycol))
  colnames(mydf)<- colnames(flattened_data)
  flattened_data<-mydf
  print(paste("Writing Flattened file for variable:",mycol))
  write.csv(flattened_data,paste("flattened_data_",mycol,".csv", sep=''), row.names = F)
  all_data[,mycol]<-NULL
  print(paste("Merging for main table for variable:",mycol))
  all_data<<-cbind(all_data,flattened_data)
  print(paste("Done with all operations for variable:",mycol))
}




all_data$date<-as.Date.character(all_data$date, format = "%Y%m%d")
all_data$month<- format.Date(all_data$date,"%m")
all_data$year<- as.numeric(format.Date(all_data$date,"%Y"))
all_data$weekday<- weekdays(all_data$date)

write.csv(all_data, "all_data.csv", row.names = F)

library(h2o)
instance<- h2o.init()

all_data_h2o<- as.h2o(all_data, destination_frame='all_data_h2o.hex')
all_data_h2o$visitNumber<- h2o.asnumeric(all_data_h2o$visitNumber)
all_data_h2o$visitStartTime <- h2o.asnumeric(all_data_h2o$visitStartTime )
all_data_h2o$hits <- h2o.asnumeric(all_data_h2o$hits )
all_data_h2o$pageviews <- h2o.asnumeric(all_data_h2o$pageviews )
all_data_h2o$transactionRevenue <- h2o.asnumeric(all_data_h2o$transactionRevenue )
#all_data_h2o$adwordsClickInfo.page<- h2o.asnumeric(all_data_h2o$adwordsClickInfo.page)
all_dat
y_vars<- c("transactionRevenue")
x_vars<-c("channelGrouping","visitNumber","visitStartTime","browser","operatingSystem","isMobile"
        ,"deviceCategory","continent","subContinent","country","region","metro","city","bounces","newVisits",
        "campaign","source","medium","keyword","adwordsClickInfo.criteriaParameters","isTrueDirect",
        "referralPath",
            











































